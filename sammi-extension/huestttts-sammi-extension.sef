[extension_name]
HueSTTTS Sammi Extension

[extension_info]
version 0.0.1 by Swolekat
[insert_external]

[insert_command]
SAMMI.extCommand("HueSTTTS Start", color = 3355443, height = 52,
    {}
);

SAMMI.extCommand("HueSTTTS Stop", color = 3355443, height = 52,
    {}
);

SAMMI.extCommand("HueSTTTS Random Voice", color = 3355443, height = 52,
    {}
);

SAMMI.extCommand("HueSTTTS Setup", color = 3355443, height = 52,
    {
        region: ["AWS Region", 14, "", null, []],
        identity: ["AWS Identity Pool", 14, "", null, []],
        audioDevice: ["Audio Device", 14, "", null, []],
    }
);
initRTC();
[insert_hook]
case "HueSTTTS Start":{
    start();
} break
case "HueSTTTS Stop":{
    stop();
} break
case "HueSTTTS Random Voice":{
    randomVoice();
} break
case "HueSTTTS Setup":{
    setup(SAMMIJSON);
} break
[insert_script]

const BROADCAST_CHANNEL = 'huestttssytem';

const signaling = new BroadcastChannel(BROADCAST_CHANNEL);
let peerConnection;

function createPeerConnection () {
    peerConnection = new RTCPeerConnection();
    peerConnection.onicecandidate = e => {
        const message = {
            type: 'candidate',
            candidate: null,
        };
        if (e.candidate) {
            message.candidate = e.candidate.candidate;
            message.sdpMid = e.candidate.sdpMid;
            message.sdpMLineIndex = e.candidate.sdpMLineIndex;
        }
        signaling.postMessage(message);
    };
}

async function handleOffer (offer) {
    if (peerConnection) {
        console.error('existing peerconnection');
        return;
    }
    await createPeerConnection();
    await peerConnection.setRemoteDescription(offer);

    const answer = await peerConnection.createAnswer();
    signaling.postMessage({type: 'answer', sdp: answer.sdp});
    await peerConnection.setLocalDescription(answer);
}

async function handleAnswer (answer) {
    if (!peerConnection) {
        console.error('no peerconnection');
        return;
    }
    await peerConnection.setRemoteDescription(answer);
}

async function handleCandidate (candidate) {
    if (!peerConnection) {
        console.error('no peerconnection');
        return;
    }
    if (!candidate.candidate) {
        await peerConnection.addIceCandidate(null);
        return;
    }
    await peerConnection.addIceCandidate(candidate);
}

async function init () {
    await createPeerConnection();

    const offer = await peerConnection.createOffer();
    signaling.postMessage({type: 'offer', sdp: offer.sdp});
    await peerConnection.setLocalDescription(offer);
}

function initRTC () {
    signaling.onmessage = e => {
        const {type} = e.data;
        if(type === 'offer'){
            handleOffer(e.data);
            return;
        }
        if(type === 'answer'){
            handleAnswer(e.data);
            return;
        }
        if(type === 'candidate'){
            handleCandidate(e.data);
            return;
        }
        if(type === 'ready'){
            init(e.data);
            return;
        }
        console.log('unhandled', e);
    };
    signaling.postMessage({type: 'ready'});
}

function startRTC(){
    initRTC();
}

function start() {
    signaling.postMessage({type: 'start'});
}
function stop() {
    signaling.postMessage({type: 'stop'});
}
function randomVoice() {
    signaling.postMessage({type: 'randomVoice'});
}
function setup(json) {
    signaling.postMessage({type: 'setup', region: json.region, identity: json.identity, audioDevice: json.audioDevice});
}
[insert_over]